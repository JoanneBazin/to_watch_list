generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WatchList {
  id           String    @id @default(cuid())
  title        String
  type         MediaType
  synopsis     String?
  year         Int?
  real         String?
  platform     String?
  categoryName String
  category     Category  @relation(fields: [categoryName], references: [name])

  users       UsersWatchList[]
  suggestions Suggestion[]
}

enum MediaType {
  FILM
  SERIE
}

model Category {
  id     String      @id @default(cuid())
  name   String      @unique
  medias WatchList[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  avatar    String   @default("/avatar.svg")
  createdAt DateTime @default(now())
  admin     Boolean  @default(false)

  friendRequestSent     FriendRequest[] @relation("Sender")
  friendRequestReceived FriendRequest[] @relation("Receiver")

  suggestionsSent     Suggestion[] @relation("Sender")
  suggestionsReceived Suggestion[] @relation("Receiver")

  watchList UsersWatchList[]
}

model FriendRequest {
  id         String        @id @default(cuid())
  senderId   String
  receiverId String
  status     RequestStatus @default(PENDING)
  sender     User          @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User          @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Suggestion {
  id              String        @id @default(cuid())
  senderId        String
  receiverId      String
  mediaId         String
  senderComment   String?
  receiverComment String?
  status          RequestStatus @default(PENDING)

  media WatchList @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  sender   User @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  userMedia UsersWatchList? @relation(fields: [receiverId, mediaId], references: [userId, mediaId], onDelete: Cascade)
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REFUSED
}

model UsersWatchList {
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  media   WatchList @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId String

  suggestions Suggestion[]

  addedAt DateTime @default(now()) @db.Date
  watched Boolean  @default(false)

  @@id([userId, mediaId])
  @@unique([userId, mediaId])
  
}
