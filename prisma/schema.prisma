generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Films {
  id           Int         @id @default(autoincrement())
  title        String
  synopsis     String?
  year         Int?
  real         String?
  platform     String?
  categoryName String
  category     Category    @relation(fields: [categoryName], references: [name])
  addedAt      DateTime    @default(now()) @db.Date
  watched      Boolean     @default(false)
  users        UserFilms[]
}

model Series {
  id           Int      @id @default(autoincrement())
  title        String
  synopsis     String?
  year         Int?
  real         String?
  platform     String?
  categoryName String
  category     Category @relation(fields: [categoryName], references: [name])
  addedAt      DateTime @default(now()) @db.Date
  watched      Boolean  @default(false)

  users UserSeries[]
}

model Category {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  Films  Films[]
  Series Series[]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  avatar    String   @default("/avatar.svg")
  createdAt DateTime @default(now())
  admin     Boolean  @default(false)

  friendRequestSent     FriendRequest[] @relation("sentRequests")
  friendRequestReceived FriendRequest[] @relation("receivedRequests")

  films  UserFilms[]
  series UserSeries[]
}

model FriendRequest {
  id         Int           @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     RequestStatus @default(PENDING)
  sender     User          @relation("sentRequests", fields: [senderId], references: [id])
  receiver   User          @relation("receivedRequests", fields: [receiverId], references: [id])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model UserFilms {
  user   User  @relation(fields: [userId], references: [id])
  userId Int
  film   Films @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId Int

  @@id([userId, filmId])
}

model UserSeries {
  userId  Int
  serieId Int
  user    User   @relation(fields: [userId], references: [id])
  serie   Series @relation(fields: [serieId], references: [id], onDelete: Cascade)

  @@id([userId, serieId])
}
